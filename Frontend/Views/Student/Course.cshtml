@{
    Layout = "_LayoutHome";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>Document</title>
    <link rel="stylesheet" href="	https://maxcdn.bootstrapcdn.com/bootstrap/4.4.1/css/bootstrap.min.css">

    <style>
        .detail {
            display: none;
        }
        button{
            padding-left: 10px;
            padding-right: 10px;
            border-radius: 20px;
            background-color: #eeeee4;
        }
        button:hover{
                background-color: #52a832
        }
        .youtube-container {
            overflow: hidden;
            width: 100%;
            /* Keep it the right aspect-ratio */
            aspect-ratio: 16/9;
            position: relative;
            /* No clicking/hover effects */
            /* pointer-events: none; */
            iframe

        {
            /* Extend it beyond the viewport... */
            width: 300%;
            height: 100%;
            /* ...and bring it back again */
            margin-left: -100%;
        }

        }

        label {
            font-size: 24px;
            font-weight: 700;
            cursor: pointer;
            color: #525d6f;
            opacity: .4;
            transition: opacity .4s ease-in-out;
            display: block;
            width: calc(100% - 48px);
            text-align: right;
            z-index: 100;
            user-select: none;
        }

        input[type="radio"] {
            display: none;
            width: 0;
        }

            label:hover, input[type="radio"]:checked + label {
                opacity: 1;
            }

        .popup {
            width: 100%;
            height: 100%;
           
            border-radius: 48px;
            box-sizing: border-box;
            border: 16px solid #ebf0f4;
            background-color: #dfe6ed;
            overflow: hidden;
            box-shadow: 16px 16px 48px #2e364330;
        }
        .atest:hover{
            background-color:blue;
        }
        .tabs {
            width: 100%;
            max-width: 240px;
            height: 100%;
            display: flex;
            flex-direction: column;
            justify-content: space-around;
            position: relative;
            overflow-y: auto; /* Add overflow-y property */
        }

        .marker {
            position: absolute;
            width: 100%;
            height: 200%;
            display: flex;
            flex-direction: column;
            top: calc(-100% );
            left: 0;
            transition: transform .2s ease-in-out;
        }

            .marker #bottom, .marker #top {
                background-color: #ebf0f4;
                box-shadow: 32px 32px 48px #2e364315;
            }

            .marker #top {
                height: calc(50%);
                margin-bottom: auto;
                border-radius: 0 0 32px 0;
            }

            .marker #bottom {
                height: calc(50% - 72px);
                border-radius: 0 32px 0 0;
            }

        .tabs-and-data {
            display: flex;
            align-items: flex-start; /* Align items at the top */
        }

        .tabs {
            width: 100%; /* Adjust width as needed */
            margin-right: 20px; /* Add some space between tabs and additional data */
        }

        .additional-data {
            width: 100%; /* Adjust width as needed */
        }

        #tab1:checked ~ .marker {
            transform: translateY(calc(calc(50% / 6) * 0));
        }

        #tab2:checked ~ .marker {
            transform: translateY(calc(calc(50% / 6) * 1));
        }

        #tab3:checked ~ .marker {
            transform: translateY(calc(calc(50% / 6) * 2));
        }

        #tab4:checked ~ .marker {
            transform: translateY(calc(calc(50% / 6) * 3));
        }

        #tab5:checked ~ .marker {
            transform: translateY(calc(calc(50% / 6) * 4));
        }

        #tab6:checked ~ .marker {
            transform: translateY(calc(calc(51% / 6) * 5));
        }
    </style>
</head>
<body>
    <br />
    <br />
    <br />
    <br />
    <br />
    <div class="popup">
        <div class="tabs-and-data">
            <div class="tabs" id="tabsContainer">

                <div class="marker">
                    <div id="top"></div>
                    <div id="bottom"></div>
                </div>
            </div>
            <!-- Additional data aligned with tabs -->
            <div class="additional-data">
                <!-- Your content here -->
                <div class="lesson-detail detail">
                    <div class="lesson-content"></div>
                    <div class="lesson-navigation">
                        <div class="row">
                            <div class="col-md-6">
                               <button class="prev-lesson-btn">Previous Lesson</button>
                            </div>
                            <div class="col-md-6">
                                <button style="    margin-left: 79%;" class="next-lesson-btn">Next Lesson</button>
                            </div>
                        </div>
                    </div>
                    <button class="mark-complete-btn">Mark as Completed</button>
                </div>

                <div class="test-detail detail">
                    <div class="test-history" style="overflow-y: auto; height: 300px; padding: 10px; background-color: #f7f7f7;     border: 4px solid #deeb34;border-radius: 20px;"></div>
                    <div class="test-info" style="overflow-y: auto; height: 270px; padding: 10px; background-color: #f7f7f7;     border: 4px solid #deeb34; border-radius: 20px;"></div>
                </div>

            </div>
        </div>
    </div>


 


    <script src="https://code.jquery.com/jquery-1.11.1.min.js"></script>

    <script src="~/js/auth/api.js"></script>

    <script>
      
        const token = getAccessToken();
        const urlParam = new URLSearchParams(window.location.search);
        const courseId = urlParam.get("courseId");
        let lessonIndex = 0;
        let lessons = [];
        $(window).load(function () {
            // Initially update marker transitions
            updateMarkerTransitions();
          
          
            setTimeout(loadListLessons(), 2000);
            document
                .querySelector(".prev-lesson-btn")
                .addEventListener("click", navigateToPreviousLesson);
            document
                .querySelector(".next-lesson-btn")
                .addEventListener("click", navigateToNextLesson);
        });
      
        
        
        function addTab(resourceId, name, isComplete) {
            console.log(isComplete);
            const tabsContainer = document.getElementById('tabsContainer');
            const newTabNumber = tabsContainer.children.length / 2 + 1;

            const newTab = document.createElement('input');
            newTab.type = 'radio';
            newTab.id = 'tab' + newTabNumber;
            newTab.name = 'tab';
            newTab.classList.add('lesson-link'); // Add class
            newTab.dataset.type = 'lesson'; // Add data-type attribute
            newTab.dataset.id = resourceId; // Add data-id attribute
            tabsContainer.appendChild(newTab);

            const newLabel = document.createElement('label');
            newLabel.htmlFor = 'tab' + newTabNumber;
            newLabel.textContent = name;
            tabsContainer.appendChild(newLabel);

            // Update marker transitions
            updateMarkerTransitions();
            if (isComplete == true) {
                newLabel.style.color = 'green';
            }
        }
        function addTabTest(resourceId, name) {
            const tabsContainer = document.getElementById('tabsContainer');
            const newTabNumber = tabsContainer.children.length / 2 + 1;

            const newTab = document.createElement('input');
            newTab.type = 'radio';
            newTab.id = 'tab' + newTabNumber;
            newTab.name = 'tab';
            newTab.classList.add('test-link'); // Add class
            newTab.dataset.type = 'test'; // Add data-type attribute
            newTab.dataset.id = resourceId; // Add data-id attribute
            tabsContainer.appendChild(newTab);

            const newLabel = document.createElement('label');
            newLabel.htmlFor = 'tab' + newTabNumber;
            newLabel.textContent = "Test" + name;
            tabsContainer.appendChild(newLabel);

            // Update marker transitions
            updateMarkerTransitions();
        }
        function removeTab() {
            const tabsContainer = document.getElementById('tabsContainer');
            if (tabsContainer.children.length > 2) {
                tabsContainer.removeChild(tabsContainer.lastElementChild);
                tabsContainer.removeChild(tabsContainer.lastElementChild);
            } else {
                alert('Minimum limit reached.');
            }

            // Update marker transitions
            updateMarkerTransitions();
        }
        function updateMarkerTransitions() {
            const tabs = document.querySelectorAll('.tabs input[type="radio"]');
            const marker = document.querySelector('.marker');

            tabs.forEach((tab, index) => {
                tab.id = 'tab' + (index + 1);
                tab.name = 'tab'; // Add this line to ensure all tabs have the same name attribute
                tab.nextElementSibling.htmlFor = 'tab' + (index + 1);
                tab.checked = index === 0;

                tab.addEventListener('change', () => {
                    marker.style.transform = `translateY(calc(calc(50% / ${tabs.length}) * ${index}))`;
                });
            });
        }
        function loadListLessons() {
           
            fetch(`http://localhost:5020/api/Resource/Course/${courseId}`, {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((response) => response.json())
                .then((data) => {
                    var count = 0;
                    lessons = data;
                    data.forEach((lesson) => {
                        if (count == 0) {
                            count++;
                            loadLessonDetail(lesson.resourceId);
                        }
                        addTab(lesson.resourceId, lesson.name, lesson.isComplete);
                    });
                    // Attach event listeners after loading lessons
                    attachLessonEventListeners();
                    updateLessonNavigation();
                    fetch(`http://localhost:5020/api/Test/Course/${courseId}`, {
                        method: "GET",
                        headers: {
                            Authorization: `Bearer ${token}`,
                        },
                    })
                        .then((response) => response.json())
                        .then((data) => {
                            const listTests = document.querySelector(".list-tests");
                            data.forEach((test) => {

                                addTabTest(test.testId, test.testName);
                            });
                            attachTestEventListeners();
                        });
                });
         
        }
        function attachLessonEventListeners() {
            // Add event listeners to lesson links
            document.querySelectorAll(".lesson-link").forEach((link) => {
                link.addEventListener("click", (event) => {
                    event.preventDefault();
                    const lessonId = link.getAttribute("data-id");
                    const lesson = lessons.find(
                        (lesson) => lesson.resourceId === parseInt(lessonId)
                    );
                    lessonIndex = lessons.indexOf(lesson);
                    loadLessonDetail(lessonId);
                    updateLessonNavigation();
                });
            });
        }
        function updateLessonNavigation() {
            const prevLessonBtn = document.querySelector(".prev-lesson-btn");
            const nextLessonBtn = document.querySelector(".next-lesson-btn");
            if (lessons.length === 0) {
                prevLessonBtn.style.display = "none";
                nextLessonBtn.style.display = "none";
                return;
            }
            prevLessonBtn.style.display = lessonIndex === 0 ? "none" : "inline";
            nextLessonBtn.style.display =
                lessonIndex === lessons.length - 1 ? "none" : "inline";
        }
        function navigateToPreviousLesson() {
            if (lessonIndex > 0) {
                lessonIndex--;
                const lessonId = lessons[lessonIndex].resourceId;
                loadLessonDetail(lessonId);
                updateLessonNavigation();
            }
        }
        function navigateToNextLesson() {
            if (lessonIndex < lessons.length - 1) {
                lessonIndex++;
                const lessonId = lessons[lessonIndex].resourceId;
                loadLessonDetail(lessonId);
                updateLessonNavigation();
            }
        }
        function attachTestEventListeners() {
            // Add event listeners to test links
            document.querySelectorAll(".test-link").forEach((link) => {
                link.addEventListener("click", (event) => {
                    event.preventDefault();
                    const testId = link.getAttribute("data-id");
                    loadTestDetail(testId);
                });
            });
        }

        function loadLessonDetail(lessonId) {
            // Hide other detail sections
            document.querySelectorAll(".detail").forEach((detail) => {
                detail.style.display = "none";
            });
            fetch(`http://localhost:5020/api/Resource/Resource/${lessonId}`, {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((response) => response.json())
                .then((data) => {
                    const lessonDetail = document.querySelector(".lesson-detail");
                    const lessonContent = lessonDetail.querySelector(".lesson-content");
                    if (data.type === "Reading") {
                        lessonContent.innerHTML = `
           <div class="container">
            <div class="col-lg-12 border p-3 main-section bg-white">
                <div class="row m-0">
                    <div class="col-lg-12">
                        <div class="right-side-pro-detail border p-3 m-0">
                            <div class="row">
                                <div class="col-lg-12">
                                            <span>Resouce Name: ${data.name}</span>
                                                    <p class="m-0 p-0">Description: ${data.description}</p>
                                </div>
                                <div class="col-lg-12">
                                            <p class="m-0 p-0 price-pro">Type: ${data.type}</p>
                                    <hr class="p-0 m-0">
                                </div>
                                        <div class="col-lg-12 pt-2" style="min-height: 650px;">
                                    <h5>Lesson Detail</h5>
                                            <span>${data.content}</span>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>`;
                    } else if (data.type === "Video") {
                        lessonContent.innerHTML = `
                         <div class="container">
            <div class="col-lg-12 border p-3 main-section bg-white">
                <div class="row m-0">
                    <div class="col-lg-12">
                        <div class="right-side-pro-detail border p-3 m-0">
                            <div class="row">
                                <div class="col-lg-12">
                                            <span> Name: ${data.name}</span>
                                                    <p class="m-0 p-0">Description: ${data.description}</p>
                                </div>
                                <div class="col-lg-12">
                                            <p class="m-0 p-0 price-pro">Type: ${data.type}</p>
                                    <hr class="p-0 m-0">
                                </div>
                                        <div class="col-lg-12 pt-2" style="min-height: 650px;">
                                    <h5>Lesson Detail</h5>
                                                    <div class="youtube-container">
                                              <iframe class="youtube-video" src="${data.content}?autoplay=1&loop=1&color=white&controls=0&modestbranding=1&playsinline=1&rel=0&enablejsapi=1" frameborder="0" allow="autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture"></iframe>
                                          </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

            </div>
        </div>`;
                    }
                    if (data.isComplete) {
                        lessonDetail.querySelector(".mark-complete-btn").style.display =
                            "none";
                    } else {
                        lessonDetail.querySelector(".mark-complete-btn").style.display =
                            "block";
                    }
                    lessonDetail.style.display = "block"; // Show the lesson detail section
                    const markCompleteBtn =
                        lessonDetail.querySelector(".mark-complete-btn");
                    markCompleteBtn.addEventListener("click", () => {
                        markLessonAsCompleted(lessonId);
                    });
                })
                .catch((error) => {
                    console.error("Error fetching lesson detail:", error);
                });
        }
        function markLessonAsCompleted(lessonId) {
            // Send request to mark lesson as completed
            // You can implement this part based on your backend API
            // For example:
            fetch(
                `http://localhost:5020/api/Resource/CompleteResource/${lessonId}`,
                {
                    method: "POST",
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                }
            )
                .then((response) => {
                    if (response.ok) {
                        // Update UI to indicate lesson is completed
                        const lessonDetail = document.querySelector(".lesson-detail");
                        const completeStatus = lessonDetail.querySelector(
                            ".lesson-content p:last-child"
                        );
                        completeStatus.textContent = "Complete: Yes";
                        const listLessons = document.querySelector(".list-resources");
                        listLessons.innerHTML = "";
                        lessonDetail.querySelector(".mark-complete-btn").style.display =
                            "none";
                        loadListLessons(); // Reload the list of lessons to update the status
                    } else {
                        throw new Error("Failed to mark lesson as completed");
                    }
                })
                .catch((error) => {
                    console.error("Error marking lesson as completed:", error);
                });
        }
        function loadTestDetail(testId) {
            // Hide other detail sections
            document.querySelectorAll(".detail").forEach((detail) => {
                detail.style.display = "none";
            });
            const testDetail = document.querySelector(".test-detail");
            // Fetch and display test history and test info
            fetch(`http://localhost:5020/api/Test/HistoryTest/${testId}`, {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((response) => response.json())
                .then((testHistory) => {
                    const testHistoryDiv = testDetail.querySelector(".test-history");
                    testHistoryDiv.innerHTML = "<h3>Test History</h3>";
                    testHistory.forEach((history) => {
                        const historyItem = document.createElement("div");
                        historyItem.innerHTML = `
                                  <p>Test Date: ${history.testDate}</p>
                                  <p>Points: ${history.point}</p>
                                  <p>Time Spent: ${history.timeDoTest} minutes</p>----------------------------------------------------------------------------------------
                              `;
                        testHistoryDiv.appendChild(historyItem);
                    });
                })
                .catch((error) => {
                    console.error("Error fetching test history:", error);
                });
            fetch(`http://localhost:5020/api/Test/TestDetail/${testId}`, {
                method: "GET",
                headers: {
                    Authorization: `Bearer ${token}`,
                },
            })
                .then((response) => response.json())
                .then((detail) => {
                    const testInfoDiv = testDetail.querySelector(".test-info");
                    testInfoDiv.innerHTML = "<h3>Test Info</h3>";
                    const detailItem = document.createElement("div");
                    detailItem.innerHTML = `
                                  <p>Test Name: ${detail.testName}</p>
                                  <p>Time Limit: ${detail.time} minutes</p>
                                  <p>Percent Point: ${detail.percentPoint}%</p>
                                  <p>Number of Questions: ${detail.numberQuestion}</p>
                                          <a class="atest" style='    background-color: lightblue; padding: 10px 63px; border-radius: 15px;' href="/Student/DoTest?testId=${detail.testId}">Do Test</a>
                              `;
                    testInfoDiv.appendChild(detailItem);
                })
                .catch((error) => {
                    console.error("Error fetching test detail:", error);
                });
            testDetail.style.display = "block"; // Show the test detail section
        }
    </script>
</body>
</html>